---
import { Button } from 'astro-pure/user'
import PageLayout from '@/layouts/ProjectsPage.astro'
import BatchAddressChecker from '@/components/BatchAddressChecker.vue'
import AddressChecker from '@/components/AddressChecker.vue'

const headings = [
  { depth: 2, slug: 'singular-demo', text: '单条数据查询' },
  { depth: 2, slug: 'plurality-demo', text: '批量数据查询' },
  { depth: 2, slug: 'motivation', text: '制作初衷' }
]
---

<PageLayout title='手机号信息查询' {headings} comment>
  <p>一个轻量级的PHP库，能够智能地从非结构化的地址文本中提取结构化信息</p>
  <p>
    解决了电子商务、物流和CRM系统中常见的一个问题：处理以非标准化格式提交的地址，当用户提交携带手机号、姓名、地址等信息的文字时，该库会自动提取并整理成结构化数据
  </p>

  <Button
    title='通过 Zread 了解本项目'
    class='w-fit'
    href='https://zread.ai/zxc7563598/php-address-parser'
    variant='ahead'
  />
  <Button
    title='前往 GitHub 查看文档'
    class='w-fit'
    href='https://github.com/zxc7563598/php-address-parser'
    variant='ahead'
  />

  {/* singular-demo */}
  <h2 id='singular-demo'>单条数据查询</h2>
  <AddressChecker client:load />

  {/* plurality-demo */}
  <h2 id='plurality-demo'>批量数据查询</h2>
  <BatchAddressChecker client:load />

  {/* motivation */}
  <h2 id='motivation'>制作初衷</h2>

  <p>在实际业务中，用户填写的地址往往是非结构化的，例如：</p>
  <p><b>张三 13512345678 北京市朝阳区建国路 88 号 邮编 100000</b></p>
  <p>将这些信息手动拆分不仅低效，而且容易出错。hejunjie/address-parser 就是为了解决这种 非结构化地址的自动解析 而设计的，广泛适用于：</p>
  <ul>
    <li>电商系统中的订单地址处理</li>
    <li>快递物流系统地址识别</li>
    <li>后台管理系统用户信息补全</li>
    <li>小程序/APP 用户地址录入校验</li>
  </ul>
  <p>无论是个人项目还是企业系统，它都能快速提升地址处理的自动化与准确率。</p>
  <p>有啥问题或者建议都欢迎提 issue 或 PR，我会尽量回复。</p>
</PageLayout>
